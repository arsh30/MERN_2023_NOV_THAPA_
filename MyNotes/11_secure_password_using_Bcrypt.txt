PASSWORD SECURE USING HASHING WITH THE HELP OF BCRYPT 

JABHI KOI REGISTER  KRTA HAI UUSME PASSWORD WALI FIELD IS VERY NECCESSARY
JO PASSWORD HOGA -> USKO HASH KREGE -> AND THEN DB ME STORE HOGA

1. npm i bcryptjs

Note -> 
- bcrypt.hash -> TO HASH THE PASSWORD 
- bcrypt.compare - TAKI LOGIN KE TIME COMPARE KAR SKE

=============================================== APPROACH 1 -> TO SAVE THE HASH PASSWORD IN DB ===========================================

const User = require("../models/user-model");
const bcrypt = require("bcryptjs");

/*----------------
HOME LOGIC
------------------ */

const home = async (req, res) => {
  // always use async , we should have to use try and catch , async ke sath use krna chaiye

  try {
    // Paste the logic, or response part
    res.status(200).send("welcome to mern project auth-router");
  } catch (error) {
    console.log(error);
  }
};

/*---------------------------
Register logic

1. GET REGISTRATION DATA: data ko get krege with the help of req.body (user,email,password)
2. CHECK EMAIL EXISTANCE: check if the email is already registered in the db or not.
3. If it is present , simply return hojao with status code
4. HASH password -> securely hash the password.
5. otherwise Create User -> create a new User with Hash password
6. save to DB -> save user data to db
7. Respond - respond with "registration successfull" or handle errors

-----------------------------*/
const register = async (req, res) => {
  try {
    // console.log(req.body); // To get the data, what ever is typed in the frontend, we use req, and body ke andr data aayega
    const { username, email, password, phone } = req.body;

    const userExist = await User.findOne({ email: email }); // 2. User - schema jo bnaya tha Model me import kra usme search krega, and

    if (userExist) {
      return res.status(400).json({ message: "Email already Exists" });
    }

    // HASH THE PASSWORD
    const saltRound = 10; // salt means kitna complex hash password dena hai, jitna jyda denge utna jyda time consuming ho
    const hash_password = await bcrypt.hash(password, saltRound);

    const userCreated = await User.create({
      username,
      email,
      password: hash_password,
      phone,
    });
    res.status(200).json({ message: userCreated });
  } catch (error) {
    res.status(500).json("Internal Server Error");
  }
};

module.exports = { home, register };


========================== APPROACH 2 -> TO SAVE THE HASH PASSWORD IN DB USING PRE METHOD IN USERSCHEMA ==================================

1. AUTH CONTROLLER.JS 

const User = require("../models/user-model");

/*----------------
HOME LOGIC
------------------ */

const home = async (req, res) => {
  // always use async , we should have to use try and catch , async ke sath use krna chaiye

  try {
    // Paste the logic, or response part
    res.status(200).send("welcome to mern project auth-router");
  } catch (error) {
    console.log(error);
  }
};

/*---------------------------
Register logic

1. GET REGISTRATION DATA: data ko get krege with the help of req.body (user,email,password)
2. CHECK EMAIL EXISTANCE: check if the email is already registered in the db or not.
3. If it is present , simply return hojao with status code
4. HASH password -> securely hash the password.
5. otherwise Create User -> create a new User with Hash password
6. save to DB -> save user data to db
7. Respond - respond with "registration successfull" or handle errors

-----------------------------*/
const register = async (req, res) => {
  try {
    // console.log(req.body); // To get the data, what ever is typed in the frontend, we use req, and body ke andr data aayega
    const { username, email, password, phone } = req.body;

    const userExist = await User.findOne({ email: email }); // 2. User - schema jo bnaya tha Model me import kra usme search krega, and

    if (userExist) {
      return res.status(400).json({ message: "Email already Exists" });
    }

    // HASH THE PASSWORD
    // const saltRound = 10; // salt means kitna complex hash password dena hai, jitna jyda denge utna jyda time consuming ho
    // const hash_password = await bcrypt.hash(password, saltRound);

    const userCreated = await User.create({
      username,
      email,
      password,
      phone,
    });
    res.status(200).json({ message: userCreated });
  } catch (error) {
    res.status(500).json("Internal Server Error");
  }
};

module.exports = { home, register };


2) HASH PASSWORD USING PRE METHOD - INSIDE THE USER MODEL.JS --> 

const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    require: true,
  },
  email: {
    type: String,
    require: true,
  },
  phone: {
    type: String,
    require: true,
  },
  password: {
    type: String,
    require: true,
  },
  isAdmin: {
    type: Boolean,
    default: false,
  },
});

// VERY IMPORTANT
// PRE METHOD -> SECURE THE PASSWORD WITH BCRYPT (MAKE SURE IT IS ABOVE ON MODEL)
// 1st parameter is kis method ko target kr rahe hai, ie Pre
// 2nd parameter is to pass the Normal function (not arrow function)

// PRE - method, means jo data hai , usko db me save krne se pehle ye pre method run krega
// It works as a middleware, data save hone se pehle , idr jo bhi kaam krege toh vo sab run hoga, uske baad db me save hoga

userSchema.pre("save", async function (next) {
  // console.log("pre method", this);  // this me sara ka sara data aarha hai
  const user = this;

  if (!user.isModified("password")) {
    next(); // next means next step jo hoga vo kro ab, data ko db me store krne ka kaam

  }

  // IF PASSWORD IS MODIFIED, OR NEW CREATE
  try {
     const saltRound = await bcrypt.genSalt(10); // salt means kitna complex hash password dena hai, jitna jyda denge utna jyda time consuming ho
    const hash_password = await bcrypt.hash(user.password, saltRound);
    user.password = hash_password; // jo actual user.password tha, jo abhi nikala hai, usko hash password se replace krdege
  } catch (error) {
    next(error)
  }
});

// define the model or the collection name
const User = new mongoose.model("User", userSchema);
// 1st argument is collectionName, jo bhi collection name, by default sabke piche "s" ajata hai, And ye small letter me store hota hai
// 2nd argument kis collection ke andr add krege, means konsa structure h

module.exports = User;

==================== FINISH ===================