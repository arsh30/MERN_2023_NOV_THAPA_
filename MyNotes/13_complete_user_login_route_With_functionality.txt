COMPLETE LOGIN FUNCTIONALITY [Registration me parts me kra tha , but in login 1 hi lec me krege]


QUICK RECAP OF REGISTRATION 
1. Db se connection bnana pdha ie db.js file
2. model ke through Schema define krna pdha, means jo registration hoga usme konsi konsi fields hongi frontend par 
3. Auth-controller -> implement logic 
            -> 1. email,pass,phone,username get kra from body 
            -> 2. check kra if it exist , agr yes toh return with error message 
            -> 3. agr nahi, toh pehle HASH THE PASSWORD using bcrypt inside the userSchema model using Pre method
            -> 4. JSON WEB TOKEN ko get kra with the help of instance of userSchema using methods in USER SCHEMA 
            -> 5. response bhjdo phir 

=======================STEPS HOW CAN WE MAKE LOGIN ROUTE =====================================================================================================

1. Login Route ( AUTH-ROUTER.JS ) -> (ye sbse pehle chaiye hoga)

const express = require("express");
const router = express.Router(); // means in 2nd point, route bnane ke liye server ki sari configuration nahi krni hogi, jo route ko define krege
//  like we did in server.js file, udr app.get kr, rahe the, so idr express.Router() class ka use krege to create Routes

const authcontrollers = require("../controllers/auth-controller");

router.route("/").get(authcontrollers.home);

router.route("/register").post(authcontrollers.register);
router.route("/login").post(authcontrollers.login);

module.exports = router;

*******************************************


2. LOGIN Logic (auth-controllers)

const User = require("../models/user-model");
const bcrypt = require("bcryptjs");

/*----------------
HOME LOGIC
------------------ */

const home = async (req, res) => {
  // always use async , we should have to use try and catch , async ke sath use krna chaiye

  try {
    // Paste the logic, or response part
    res.status(200).send("welcome to mern project auth-router");
  } catch (error) {
    console.log(error);
  }
};

/*---------------------------
Register logic

1. GET REGISTRATION DATA: data ko get krege with the help of req.body (user,email,password)
2. CHECK EMAIL EXISTANCE: check if the email is already registered in the db or not.
3. If it is present , simply return hojao with status code
4. HASH password -> securely hash the password.
5. otherwise Create User -> create a new User with Hash password
6. save to DB -> save user data to db
7. Respond - respond with "registration successfull" or handle errors

-----------------------------*/
const register = async (req, res) => {
  try {
    // console.log(req.body); // To get the data, what ever is typed in the frontend, we use req, and body ke andr data aayega
    const { username, email, password, phone } = req.body;

    const userExist = await User.findOne({ email: email }); // 2. User - schema jo bnaya tha Model me import kra usme search krega, and

    if (userExist) {
      return res.status(400).json({ message: "Email already Exists" });
    }

    // HASH THE PASSWORD
    // const saltRound = 10; // salt means kitna complex hash password dena hai, jitna jyda denge utna jyda time consuming ho
    // const hash_password = await bcrypt.hash(password, saltRound);

    const userCreated = await User.create({
      username,
      email,
      password,
      phone,
    });
    res.status(201).json({
      // message: userCreated, Not send the user details on frontend
      message: "Registration Successfull",
      token: await userCreated.generateToken(),
      userId: userCreated._id.toString(),
    });
  } catch (error) {
    res.status(500).json("Internal Server Error");
  }
};

/*=======================================
            USER LOGIN LOGIC
=========================================*/

const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // 2. check Email Valid or not [Means vo already registred kiya gya h db me ya nahi]
    // agr email id, db me hai hi nahi  means vo kbhi registered hua hi nahi, agr kabhi registered hua hi nahi toh Login nahi krwa skte, usko bolege ki register krle pehle

    // doubt (IMPORTANT CONCEPT) -> registration ke time Model create kra kyuki vo entry krega jo jo fields chaiye hongi frontend pr ki usme ye sari fields hongi
    // but login ke liye toh koi model define hi nahi kra, same UserSchema wala model h usko use krege, kyuki once user registered hojayega toh baat hi khtm
    // kyu bar bar login ke alag Schema bnana
    const userExist = await User.findOne({ email: email });
    console.log("user exist", userExist);

    // 3. user agr exist nahi krta toh usko pehel bolege ki registered kre then login kre
    if (!userExist) {
      return res.status(400).json({ message: "Invalid Credentials" });
    }

    // 4. If userExist (toh password ko compare krege)
    const user = await bcrypt.compare(password, userExist.password); // PASSWORD JO ALREADY STORE H, AND hash_password ko compare kra
    console.log("user", user);
    
    if (user) {
      console.log("INSIDE IF");
      res.status(200).json({
        message: "Login Successfull",
        token: await userExist.generateToken(), // mandatory because we need this, make sure idr userExist agr krta hai tabhi Token generate krwana thaa, taki hum client ko send kr ske , authentication and autherization krwa paye
        userId: userExist._id.toString(),
      });
    } else {
      res.status(401).json({
        message: "Invalid Email or Password",
      });
    }
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

module.exports = { home, register, login };

============================= FINISH ==================